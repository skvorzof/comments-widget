import React, { useRef } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import { addComment } from '../store/commentsSlice';
import { setDataStore } from '../api.js';

import toast from '../toast/toast';
import './add-comment.css';

export const AddComment = () => {
  const dispatch = useDispatch();
  const comments = useSelector((state) => state.comments.comments);

  const autorRef = useRef();
  const commentRef = useRef();

  const sendForm = (e) => {
    e.preventDefault();

    const autor = autorRef.current.value;
    const comment = commentRef.current.value;

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª–µ–π –µ—Å–ª–∏ –ø—É—Å—Ç–æ
    if (autor.trim() === '') {
      toast('–ü–æ–ª–µ –∏–º—è –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—É—Å—Ç—ã–º ‚úçÔ∏è');
    } else if (comment.trim() === '') {
      toast('–ü–æ–ª–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—É—Å—Ç—ã–º ‚úçÔ∏è');
    } else {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
      const isExist = comments.some((el) => el.comment === comment);

      if (isExist) {
        toast('–¢–∞–∫–æ–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å—É—â–µ—Å—Ç–≤—É–µ—Ç üëæ');
      } else {
        const newComment = {
          date: Date.now(),
          autor: autor.trim(),
          comment: clearTags(comment).trim(),
        };

        setDataStore([...comments, newComment]); // –î–æ–±–∞–≤–ª—è–µ–º –≤ LocalStore

        dispatch(addComment(newComment)); // –î–æ–±–∞–≤–ª—è–µ–º –≤ store
      }
      // –û—á–∏—Å—Ç–∏—Ç—å –ø–æ–ª—è
      autorRef.current.value = '';
      commentRef.current.value = '';
    }
  };

  //–£–¥–∞–ª–∏—Ç—å html tags
  const clearTags = (str) => {
    return str.replace(/<[^>]+>/gi, '');
  };

  return (
    <form onSubmit={sendForm}>
      <input ref={autorRef} type="text" placeholder="–ò–º—è –∏–ª–∏ –Ω–∏–∫" />
      <textarea ref={commentRef} placeholder="–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π" rows="4"></textarea>
      <button className="btn btn-form">–û—Ç–ø—Ä–∞–≤–∏—Ç—å</button>
    </form>
  );
};
